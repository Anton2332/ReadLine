datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

enum groupRole {
  OWNER
  ADMIN
  REDACTOR
  MEMBER
}

enum rootType {
  TEXTS
  IMAGES
  EBOOK
}

enum ageLimitType {
  ALL
  SIXTEEN_PLUS
  EIGHTEEN_PLUS
}

enum statusType {
  COMPLETED
  IN_PROGRESS
  FROZEN
  PREVIEW
  LICENSED
  THERE_IS_NO_TRANSLATOR
}

enum fileType {
  EPUB
  PDF
  MOBe
}

model user {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  nickname  String   @default("Nickname")
  avatar    String?
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now()) @map("created_at")

  userToGroup    userToGroup[]
  history        history[]
  viewingHistory viewingHistory[]

  @@map("users")
}

model group {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  imageUrl    String?  @map("image_url")
  createdAt   DateTime @default(now()) @map("created_at")

  userToGroup userToGroup[]

  filePath filePath[]
  chapter  chapter[]
}

model userToGroup {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  groupRole groupRole @map("group_role")
  createdAt DateTime  @default(now()) @map("created_at")

  groupId String @db.ObjectId
  group   group  @relation(fields: [groupId], references: [id])

  userId String @db.ObjectId
  user   user   @relation(fields: [userId], references: [id])

  @@map("user_to_group")
}

model product {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  originalTitle String       @map("original_title")
  description   String?
  imageUrl      String?      @map("image_url")
  rootType      rootType     @map("root_type")
  status        statusType   @map("status_type")
  ageLimit      ageLimitType @map("age_limit_type")
  publishedAt   DateTime     @default(now()) @map("published_at")
  createdAt     DateTime     @default(now()) @map("created_at")
  isApproved    Boolean      @default(false) @map("is_approved")

  genres   genre[]  @relation(fields: [genreIds], references: [id])
  genreIds String[] @db.ObjectId

  tags   tag[]    @relation(fields: [tagIds], references: [id])
  tagIds String[] @db.ObjectId

  originalLanguageId String   @db.ObjectId
  originalLanguage   language @relation(fields: [originalLanguageId], references: [id])

  titleByLanguage titleByLanguage[]

  filePath filePath[]
  chapter  chapter[]
}

model genre {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  products   product[] @relation(fields: [productIds], references: [id])
  productIds String[]  @db.ObjectId
}

model tag {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  products   product[] @relation(fields: [productIds], references: [id])
  productIds String[]  @db.ObjectId
}

model language {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String  @unique
  iconUrl String? @map("icon_url")

  titleByLanguage titleByLanguage[]

  product product[]

  filePath filePath[]
  chapter  chapter[]
}

model titleByLanguage {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  product   product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  language   language @relation(fields: [languageId], references: [id])
  languageId String   @db.ObjectId

  @@map("title_by_language")
}

model filePath {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  contentType fileType @map("content_type")
  contentUrl  String   @map("content_url")
  createdAt   DateTime @default(now()) @map("created_at")

  productId String  @map("product_id") @db.ObjectId
  product   product @relation(fields: [productId], references: [id])

  groupId String @map("group_id") @db.ObjectId
  group   group  @relation(fields: [groupId], references: [id])

  languageId String   @map("language_id") @db.ObjectId
  language   language @relation(fields: [languageId], references: [id])

  history history[]

  @@map("file_path")
}

model chapter {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  seasonNumber   Int      @map("season_number")
  numberInSeason Int      @map("number_in_season")
  chapterNumber  Int      @map("chapter_number")
  createdAt      DateTime @default(now()) @map("created_at")

  imagesUrl String[] @map("images_url")
  text      String?

  productId String  @map("product_id") @db.ObjectId
  product   product @relation(fields: [productId], references: [id])

  groupId String @map("group_id") @db.ObjectId
  group   group  @relation(fields: [groupId], references: [id])

  languageId String   @map("language_id") @db.ObjectId
  language   language @relation(fields: [languageId], references: [id])

  history        history[]
  viewingHistory viewingHistory[]

  @@unique([productId, seasonNumber, numberInSeason])
  @@unique([productId, chapterNumber])
}

model history {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  userIp    String   @map("user_ip")

  userId String? @map("user_id") @db.ObjectId
  user   user?   @relation(fields: [userId], references: [id])

  chapterId String?  @map("chapter_id") @db.ObjectId
  chapter   chapter? @relation(fields: [chapterId], references: [id])

  fileId     String?   @map("file_id") @db.ObjectId
  file       filePath? @relation(fields: [fileId], references: [id])
  pageNumber Int?
}

model viewingHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  userIp    String   @map("user_ip")

  userId String? @map("user_id") @db.ObjectId
  user   user?   @relation(fields: [userId], references: [id])

  productId String?  @map("chapter_id") @db.ObjectId
  product   chapter? @relation(fields: [productId], references: [id])

  @@map("viewing_history")
}
